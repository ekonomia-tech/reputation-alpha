specVersion: 0.0.4
description: Euler is a non-custodial protocol on Ethereum that allows users to lend and borrow almost any crypto asset.
repository: https://github.com/ekonomia-tech/reputation-alpha
schema:
  file: ../../schema.graphql
dataSources:
  - kind: ethereum/contract
    name: Euler
    network: mainnet
    source:
      address: "0x27182842E098f60e3D576794A5bFFb0777E025d3"
      abi: Euler
      startBlock: 13687581
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.6
      language: wasm/assemblyscript
      file: ./src/mappings/euler.ts
      entities:
        - Euler
      abis:
        - name: Euler
          file: ./abis/Euler.json
        - name: ERC20
          file: ./abis/erc20.json
        - name: PriceOracle
          file: ./abis/priceOracle.json
        - name: _ERC20
          file: ./abis/Prices/ERC20.json
        # Curve Contracts
        - name: CurveRegistry
          file: ./abis/Prices/Curve/Registry.json
        - name: CalculationsCurve
          file: ./abis/Prices/Calculations/Curve.json
        # YearnLens Contracts
        - name: YearnLensContract
          file: ./abis/Prices/YearnLens.json
        # ChainLink Contracts
        - name: ChainLinkContract
          file: ./abis/Prices/ChainLink.json
        # Uniswap Contracts
        - name: UniswapRouter
          file: ./abis/Prices/Uniswap/Router.json
        - name: UniswapFactory
          file: ./abis/Prices/Uniswap/Factory.json
        - name: UniswapPair
          file: ./abis/Prices/Uniswap/Pair.json
        # SushiSwap Contracts
        - name: SushiSwapRouter
          file: ./abis/Prices/SushiSwap/Router.json
        - name: SushiSwapFactory
          file: ./abis/Prices/SushiSwap/Factory.json
        - name: SushiSwapPair
          file: ./abis/Prices/SushiSwap/Pair.json
        - name: CalculationsSushiSwap
          file: ./abis/Prices/Calculations/SushiSwap.json 
      eventHandlers:
        - event: Genesis()
          handler: handleGenesis
        - event: Deposit(indexed address,indexed address,uint256)
          handler: handleDeposit
        - event: Withdraw(indexed address,indexed address,uint256)
          handler: handleWithdraw
        - event: Borrow(indexed address,indexed address,uint256)
          handler: handleBorrow
        - event: Repay(indexed address,indexed address,uint256)
          handler: handleRepay
        - event: MarketActivated(indexed address,indexed address,indexed address)
          handler: handleMarketActivated
          